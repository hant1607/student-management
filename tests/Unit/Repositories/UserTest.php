<?php

namespace Tests\Unit\Repositories;

use App\Models\Result;
use App\Models\Student;
use App\Models\Subject;
use App\Repositories\UserRepository;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Faker\Factory as Faker;
use App\Models\User;

class UserTest extends TestCase
{
    protected $userRepository, $data;
    /**
     * A basic unit test example.
     *
     * @return void
     */
//    public function testExample()
//    {
//        $this->assertTrue(true);
//    }
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $faker = Faker::create();
        $this->data = [
            'username' => $faker->userName,
            'email' => $faker->unique()->safeEmail,
            'password' => $faker->password(4)
        ];
        $this->userRepository = new UserRepository(new User, new Student, new Subject, new Result);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testCreate()
    {
        $user = $this->userRepository->create($this->data);
        $this->assertInstanceOf(User::class, $user);
        $this->assertEquals($this->data['username'], $user->username);
        $this->assertEquals($this->data['email'], $user->email);
        $this->assertTrue(Hash::check($this->data['password'], $user->password));
        //ktra dữ liệu có tồn tại trong db không
//        $this->assertDatabaseHas('users', $this->data);
    }

    public function testFind()
    {
        $user = factory(User::class)->create(); //tao du lieu mau
        $found = $this->userRepository->find($user->id);
        $this->assertInstanceOf(User::class, $found);
        $this->assertEquals($found->username, $user->username);
        $this->assertEquals($found->email, $user->email);
//        $this->assertTrue(Hash::check($found->password, $user->password));
    }

    public function testUpdate()
    {
        $user = factory(User::class)->create();
        $userUpdate = $this->userRepository->update($user->id, $this->data);
        $this->assertInstanceOf(User::class, $userUpdate);
        $this->assertEquals($userUpdate->username, $this->data['username']);
        $this->assertEquals($userUpdate->email, $this->data['email']);
//        $this->assertTrue(Hash::check($userUpdate->password, $this->data['password']));
    }

    public function testDelete()
    {
        $user = factory(User::class)->create();
        $userDelete = $this->userRepository->delete($user->id);
        $this->assertTrue($userDelete);
    }
}
